/*
	Factory for export space data template
*/

var entityos = require('entityos')
var _ = require('lodash')
var moment = require('moment');
const { remove } = require('lodash');

module.exports = 
{
	VERSION: '0.0.1',

	init: function (param)
	{
		entityos.add(
		{
			name: 'continuity-util-space-export-data',
			code: function (param)
			{
				var event = entityos.get({scope: '_event'});

				console.log(event.exports);

				if (event.exports == undefined)
				{
					console.log('Event has no exports defined (event.exports).')
				}
				else
				{
					entityos.set(
					{
						scope: 'continuity-util-space-export-data-process',
						context: 'index',
						value: 0
					});

					entityos.set(
					{
						scope: 'continuity-util-space-export-data-process',
						context: 'template-file-data',
						value: {}
					});

					entityos.invoke('continuity-util-space-export-data-process');
				}
			}
		});

		entityos.add(
		{
			name: 'continuity-util-space-export-data-process',
			code: function (param)
			{
				var event = entityos.get({scope: '_event'});

				var index = entityos.get(
				{
					scope: 'continuity-util-space-export-data-process',
					context: 'index'
				});

				if (index < event.exports.length)
				{
					var exportSearch = event.exports[index];
					exportSearch = _.assign(exportSearch,
					{
						callback: 'continuity-util-space-export-data-process-next',
						callbackParam: param
					});

					if (exportSearch.rows == undefined) {exportSearch.rows = 999}

					entityos.cloud.search(exportSearch);
				}
				else
				{
					if (event.template == 'true')
					{
						var templateData = entityos.get(
						{
							scope: 'continuity-util-space-export-data-process',
							context: 'template-file-data'
						});

						fileDataTemplate =
						{
							template: templateData
						}

						filename = 'data/setup-template-' + moment().format('DD-MMM-YYYY-HH-mm') + '.json'

						entityos.invoke('util-save-to-file',
						{
							filename: filename,
							fileData: fileDataTemplate,
							onComplete: 'continuity-util-space-export-data-process-complete'
						});
	
					}
					else
					{
						entityos.invoke('continuity-util-space-export-data-process-complete')
					}
				}
			}
		});

		entityos.add(
		{
			name: 'continuity-util-space-export-data-process-next',
			code: function (param, response)
			{
				var event = entityos.get({scope: '_event'});
				var index = entityos.get(
				{
					scope: 'continuity-util-space-export-data-process',
					context: 'index'
				});

				entityos.set(
				{
					scope: 'continuity-util-space-export-data-process',
					context: 'index',
					value: index + 1
				});

				var exportSearch = event.exports[index];

				if (response.status == 'ER')
				{
					console.log('!!ERROR; Bad Search');
					console.log(exportSearch);
				}
				else
				{
					var fileData = response.data.rows;
					if (event.removeID == 'true')
					{
						_.each(fileData, function (data)
						{
							delete data.id
						});
					}

					if (event.template == 'true')
					{
						var templateData = entityos.get(
						{
							scope: 'continuity-util-space-export-data-process',
							context: 'template-file-data'
						});

						templateData[exportSearch.object] = fileData;

						entityos.invoke('continuity-util-space-export-data-process')
					}
					else
					{
						var filename = 'data/' + _.kebabCase(exportSearch.object) + '.json';
		
						entityos.invoke('util-save-to-file',
						{
							filename: filename,
							fileData: fileData,
							onComplete: 'continuity-util-space-export-data-process'
						});
					}
				}
			}
		});

		entityos.add(
		{
			name: 'continuity-util-space-export-data-process-complete',
			code: function (param, response)
			{
				var event = entityos.get({scope: '_event'});
				entityos.invoke('util-end', 'Export complete. [' + event.exports.length + ']');
			}
		});
	}
}