/*
	Factory for import space data template

	like settings.json

*/

var entityos = require('entityos')
var _ = require('lodash')
var moment = require('moment');
const { remove } = require('lodash');
const { data } = require('entityos');

module.exports = 
{
	VERSION: '0.0.1',

	init: function (param)
	{
		//https://attacomsian.com/blog/nodejs-write-json-object-to-file

		entityos.add(
		{
			name: 'continuity-util-space-import-data',
			code: function (param)
			{
				var event = entityos.get({scope: '_event'});

				console.log(event.imports);

				if (event.imports == undefined)
				{
					console.log('Event has no imports defined (event.imports).')
				}
				else
				{
					var eventImport = _.first(event.imports);

					entityos.set(
					{
						scope: 'continuity-util-space-import-data',
						context: 'event-import',
						value: eventImport
					});

					var filename = 'data/' + eventImport.filename;

					var fs = require('fs');

					fs.readFile(filename, function (err, buffer)
					{
						if (!err)
						{	
							var _fileData = buffer.toString();
							var fileData = JSON.parse(_fileData);

							entityos.set(
							{
								scope: 'continuity-util-space-import-data',
								context: 'template-file-data',
								value: fileData
							});

							console.log(fileData);

							var objects = [];

							_.each(fileData.template, function (data, key)
							{
								objects.push(
								{
									name: key,
									data: data
								});
							});

							entityos.set(
							{
								scope: 'continuity-util-space-import-data',
								context: 'template-objects',
								value: objects
							});

							entityos.set(
							{
								scope: 'continuity-util-space-import-data-process',
								context: 'object-index',
								value: 0
							});
		
							entityos.invoke('continuity-util-space-import-data-process');
						}
						else
						{
							console.log('ERROR! Could not read the file: ' + filename)
						}
					});
				}
			}
		});

		entityos.add(
		{
			name: 'continuity-util-space-import-data-process',
			code: function (param, response)
			{
				var eventImport = entityos.get(
				{
					scope: 'continuity-util-space-import-data',
					context: 'event-import'
				});

				var objects = entityos.get(
				{
					scope: 'continuity-util-space-import-data',
					context: 'template-objects'
				});

				var objectIndex = entityos.get(
				{
					scope: 'continuity-util-space-import-data-process',
					context: 'object-index'
				});

				if (objectIndex < objects.length)
				{
					if (response == undefined)
					{
						var object = objects[objectIndex];

						console.log('## ' + object.name.toUpperCase())
					
						entityos.set(
						{
							scope: 'continuity-util-space-import-data-process',
							context: 'object',
							value: object
						});

						var fields = _.map(_.first(object.data), function (data, key) {return key});

						console.log(fields);

						var filters;

						if (_.has(eventImport, 'filters.' + object.name))
						{
							filters = eventImport.filters[object.name]
						}

						console.log(filters);

						var importSearch =
						{
							object: object.name,
							fields: fields,
							filters: filters,
							rows: 9999,
							callback: 'continuity-util-space-import-data-process'
						}

						entityos.cloud.search(importSearch);
					}
					else
					{
						console.log(response.data.rows);

						entityos.set(
						{
							scope: 'continuity-util-space-import-data-process',
							context: 'object-existing-data',
							value: response.data.rows
						});

						entityos.set(
						{
							scope: 'continuity-util-space-import-data-process-object-data',
							context: 'object-data-index',
							value: 0
						});

						if (eventImport.check == 'true')
						{
							entityos.invoke('continuity-util-space-import-data-process-next');
						}
						else
						{
							entityos.invoke('continuity-util-space-import-data-process-object-data');
						}
					}
				}
				else
				{
					entityos.invoke('util-end', {notes: 'Complete'})
					//complete objects loop
				}
			}
		});

		entityos.add(
		{
			name: 'continuity-util-space-import-data-process-next',
			code: function (param, response)
			{
				//Next object
				var objectIndex = entityos.get(
				{
					scope: 'continuity-util-space-import-data-process',
					context: 'object-index'
				});

				entityos.set(
				{
					scope: 'continuity-util-space-import-data-process',
					context: 'object-index',
					value: objectIndex + 1
				});

				entityos.invoke('continuity-util-space-import-data-process');
			}
		});

		entityos.add(
		{
			name: 'continuity-util-space-import-data-process-object-data',
			code: function (param, response)
			{
				var object = entityos.get(
				{
					scope: 'continuity-util-space-import-data-process',
					context: 'object'
				});

				var objectExistingData = entityos.get(
				{
					scope: 'continuity-util-space-import-data-process',
					context: 'object-existing-data'
				});

				var objectDataIndex = entityos.get(
				{
					scope: 'continuity-util-space-import-data-process-object-data',
					context: 'object-data-index'
				});

				var eventImport = entityos.get(
				{
					scope: 'continuity-util-space-import-data',
					context: 'event-import'
				});

				if (objectDataIndex < object.data.length)
				{
					var objectData = object.data[objectDataIndex];
				
					entityos.set(
					{
						scope: 'continuity-util-space-import-data-process-object-data',
						context: 'object-data',
						value: objectData
					});

					var matchUsing = ["title"];

					if (_.has(eventImport, 'matchUsing.' + object.name))
					{
						matchUsing = eventImport.matchUsing[object.name]
					}

					var matchingExistingData = _.find(objectExistingData, function (_objectExistingData)
					{
						var existingDataMatch = ''
						_.each(matchUsing, function (_matchUsing)
						{
							existingDataMatch = existingDataMatch + '-' + _objectExistingData[_matchUsing]
						});

						var importDataMatch = ''
						_.each(matchUsing, function (_matchUsing)
						{
							importDataMatch = importDataMatch + '-' + objectData[_matchUsing]
						})

						return existingDataMatch == importDataMatch
					});

					if (matchingExistingData != undefined)
					{
						console.log('Exists:');
						console.log(objectData);
						entityos.invoke('continuity-util-space-import-data-process-object-data-next')
					}
					else
					{
						var importSave =
						{
							object: object.name,
							data: objectData,
							callback: 'continuity-util-space-import-data-process-object-data-next'
						}

						console.log(importSave)

						entityos.cloud.save(importSave);	
					}
				}
				else
				{
					entityos.invoke('continuity-util-space-import-data-process-next');
				}
			}
		});

		entityos.add(
		{
			name: 'continuity-util-space-import-data-process-object-data-next',
			code: function (param, response)
			{
				var objectDataIndex = entityos.get(
				{
					scope: 'continuity-util-space-import-data-process-object-data',
					context: 'object-data-index'
				});

				entityos.set(
				{
					scope: 'continuity-util-space-import-data-process-object-data',
					context: 'object-data-index',
					value: objectDataIndex + 1
				});

				entityos.invoke('continuity-util-space-import-data-process-object-data')	
			}
		});
	}
}